using System;
using System.Collections.Generic;
using System.Drawing;
using System.Windows.Forms;

namespace SnakeGameApp
{
    public class SnakeGameForm : Form
    {
        const int TileSize = 20;
        const int GridWidth = 20;
        const int GridHeight = 10;

        System.Windows.Forms.Timer gameTimer = new System.Windows.Forms.Timer();
        List<PictureBox> snakeBody = new List<PictureBox>();
        PictureBox food = new PictureBox();
        Random random = new Random();
        int score = 0;

        private enum Direction { Up, Down, Left, Right }
        private Direction currentDirection = Direction.Right;

        public SnakeGameForm()
        {
            this.Text = $"Jogo da Cobrinha - Pontuação: {score}";
            this.Size = new Size(GridWidth * TileSize + 16, GridHeight * TileSize + 39); 
            this.StartPosition = FormStartPosition.CenterScreen;
            this.FormBorderStyle = FormBorderStyle.FixedDialog; 
            this.MaximizeBox = false;

            gameTimer.Interval = 200;
            gameTimer.Tick += GameLoop;

            this.KeyDown += OnKeyDown;

            // Configuração inicial da cabeça da cobra (lá ele)
            var head = new PictureBox
            {
                BackColor = Color.Green,
                Size = new Size(TileSize, TileSize),
                Location = new Point(TileSize * 5, TileSize * 5),
            };

            snakeBody.Add(head);
            this.Controls.Add(head);

            // Configuração inicial da comidinha (lá ele)
            food.Size = new Size(TileSize, TileSize);
            food.BackColor = Color.Red;
            this.Controls.Add(food);
            SpawnFood();

            gameTimer.Start();
        }

        void SpawnFood()
        {
            Point foodLocation;
            do
            {
                foodLocation = new Point(random.Next(0, GridWidth) * TileSize, random.Next(0, GridHeight) * TileSize);
            } while (snakeBody.Exists(part => part.Location == foodLocation));

            food.Location = foodLocation;
        }

        void GameLoop(object sender, EventArgs e)
        {
            MoveSnake();
            CheckCollisions();
            this.Text = $"Jogo da Cobrinha - Pontuação: {score}";
        }

        void MoveSnake()
        {
            var head = snakeBody[0];
            Point newHeadLocation;

            switch (currentDirection)
            {
                case Direction.Up:
                    newHeadLocation = new Point(head.Location.X, head.Location.Y - TileSize);
                    break;
                case Direction.Down:
                    newHeadLocation = new Point(head.Location.X, head.Location.Y + TileSize);
                    break;
                case Direction.Left:
                    newHeadLocation = new Point(head.Location.X - TileSize, head.Location.Y);
                    break;
                case Direction.Right:
                    newHeadLocation = new Point(head.Location.X + TileSize, head.Location.Y);
                    break;
                default:
                    newHeadLocation = head.Location;
                    break;
            }

            for (int i = snakeBody.Count - 1; i > 0; i--)
            {
                snakeBody[i].Location = snakeBody[i - 1].Location;
            }
            snakeBody[0].Location = newHeadLocation;
        }

        void CheckCollisions()
        {
            if (snakeBody[0].Bounds.IntersectsWith(food.Bounds))
            {
                score += 10;
                SpawnFood();
                GrowSnake();
            }

            var headLocation = snakeBody[0].Location;
            if (headLocation.X < 0 || headLocation.Y < 0 || headLocation.X >= GridWidth * TileSize || headLocation.Y >= GridHeight * TileSize)
            {
                GameOver();
            }

            for (int i = 1; i < snakeBody.Count; i++)
            {
                if (snakeBody[0].Bounds.IntersectsWith(snakeBody[i].Bounds))
                {
                    GameOver();
                }
            }
        }

        void GrowSnake()
        {
            var newPart = new PictureBox
            {
                Size = new Size(TileSize, TileSize),
                BackColor = Color.LightGreen, 
            };

            snakeBody.Add(newPart);
            this.Controls.Add(newPart);
        }

        void OnKeyDown(object sender, KeyEventArgs e)
        {
            switch (e.KeyCode)
            {
                case Keys.Up:
                    if (currentDirection != Direction.Down)
                        currentDirection = Direction.Up;
                    break;
                case Keys.Down:
                    if (currentDirection != Direction.Up)
                        currentDirection = Direction.Down;
                    break;
                case Keys.Left:
                    if (currentDirection != Direction.Right)
                        currentDirection = Direction.Left;
                    break;
                case Keys.Right:
                    if (currentDirection != Direction.Left)
                        currentDirection = Direction.Right;
                    break;
            }
        }

        void GameOver()
        {
            gameTimer.Stop();
            var result = MessageBox.Show($"Fim de jogo! Sua pontuação foi: {score}\nDeseja jogar novamente?", "Game Over", MessageBoxButtons.YesNo);

            if (result == DialogResult.Yes)
            {
                Application.Restart();
            }
            else
            {
                Application.Exit();
            }
        }

        [STAThread]
        public static void Main()
        {
            Application.EnableVisualStyles();
            Application.SetCompatibleTextRenderingDefault(false);
            Application.Run(new SnakeGameForm());
        }
    }
}   
